buildscript {
	ext {
		springBootVersion = '2.5.2.RELEASE'
		dockerRegistryName = 'crazyGeniuses'
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "com.palantir.gradle.docker:gradle-docker:0.25.0"
		classpath 'com.netflix.nebula:gradle-ospackage-plugin:8.4.1'
	}
}

plugins {
	id 'org.springframework.boot' version '2.5.2'
	id 'com.palantir.docker' version '0.25.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.crazygeniuses.notifier'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2020.0.3")
}

dependencies {

	/**
	 * Spring base(core)
	 */
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	/**
	 * Third party
	 */
	implementation 'com.vladmihalcea:hibernate-types-52:2.9.11'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.3'
	implementation 'jakarta.validation:jakarta.validation-api:2.0.2'
	implementation 'com.googlecode.libphonenumber:libphonenumber:8.12.5'

	/**
	 * Google services API
	 */
	implementation 'com.google.oauth-client:google-oauth-client:1.25.0'
	implementation 'com.google.apis:google-api-services-gmail:v1-rev110-1.25.0'

	/**
	 * Swagger
	 */
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.springfox:springfox-swagger2:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'

	/**
	 * Security
	 */
	implementation('org.springframework.security:spring-security-jwt:1.0.10.RELEASE')
	implementation("io.jsonwebtoken:jjwt:0.9.1")

	/**
	 * Test impl
	 */
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testImplementation 'org.springframework.security:spring-security-test'

	/**
	 * Runtime & compile & annotation processors
	 */
	runtimeOnly 'mysql:mysql-connector-java'
	compile 'com.auth0:java-jwt:3.4.0'
	annotationProcessor 'org.projectlombok:lombok'
}


bootJar {
	enabled(true)
}

task unpack(type: Copy) {
	dependsOn bootJar
	from(zipTree(tasks.bootJar.outputs.files.singleFile))
	into("build/dependency")
}

docker {
	name "${dockerRegistryName}/shopify"
	tag "-${version}", "${dockerRegistryName}/shopify:${version}"
	tag "-latest", "${dockerRegistryName}/shopify:latest"
	copySpec.from(tasks.unpack.outputs).into("dependency")
	buildArgs(['DEPENDENCY': "dependency"])
	pull true
	noCache true
}

task incrMinorVersion {
	doFirst {
		def v = version.toString().trim()
		def minor = v.substring(v.lastIndexOf('.') + 1)
		int m = minor.toInteger() + 1
		def major = v.substring(0, v.lastIndexOf('.') + 1)
		file("gradle.properties").text = "version=" + major + m
	}
}

task getCurrentVersion {
	doFirst {
		def ver = version.toString().trim()
		println ver.substring(ver.lastIndexOf('=') + 1)
	}
}
